其实，还有一种解法，有n个乘客都有自己需要去的楼层，在停止楼层下电梯之后，大家都要去自己的目标楼层，那么我们假设每位乘客都已经在目的楼层了，那么我们可以将问题转换为，所有乘客在哪一层碰头，所需要爬的楼梯最少。一般这种会面算法，最佳地点应该选择在中间数，即将每一位乘客所在位置，放进一个数组并排序取中间数就是最佳会面地点。（注：当乘客数为n，则最佳地点就是有序地点集合中第(n+1)/2个元素代表的地点）。其中这里的排序可以用桶排序，因为楼层数不会过于庞大，那么把每一层都当做一个桶，然后把相应的人放进去，桶号即数组下标，然后逐个取出就完成了排序，复杂度是线性的。


public class ElevatorController3 {
	
	private static int[] calSort(int[] a,int N,int n)
	{
		int[] res=new int[n];
		int k=0;
		for(int i=0;i<=N;i++)
		{
			int temp=a[i];
			while(temp>0)
			{
				res[k++]=a[i];
			}
		}
		return res;
	}
	
 
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc=new Scanner(System.in);
		int N=sc.nextInt();
		int n=sc.nextInt();
		int passenger[]=new int[N+1];
		for(int i=0;i<n;i++)
		{
			passenger[sc.nextInt()]+=1;
		}
		sc.close();
		int[] res=calSort(passenger,N,n);//桶排序
		int stopFloor=res[(n+1)/2-1];
		int nMinFloor=0;
		for(int i=1;i<=N;i++)
		{
			nMinFloor+=(i-stopFloor)*passenger[i];
		}
		System.out.println("最佳停电梯的楼层为："+stopFloor);
		System.out.println("乘客需要爬楼梯的总数为："+nMinFloor);
 
	}
 
}
